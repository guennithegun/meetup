{"version":3,"sources":["Event.js","EventList.js","mock-events.js","api.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorker.js","index.js"],"names":["Event","state","showDetails","handleShowDetails","_this","setState","_this2","this","react_default","a","createElement","className","props","event","name","local_date","onClick","description","Component","EventList","events","map","key","id","src_Event","mockEvents","city","lat","lon","country","zip","member_count","created","duration","rsvp_limit","date_in_series_pattern","status","time","local_time","updated","utc_offset","waitlist_count","yes_rsvp_count","venue","repinned","address_1","localized_country_name","group","join_mode","urlname","who","localized_location","region","timezone","link","visibility","member_pay_fee","_callee","query","token","url","result","regenerator_default","wrap","_context","prev","next","window","location","href","startsWith","abrupt","name_string","getAccessToken","sent","axios","get","data","stop","getEvents","_callee2","_context2","_callee3","page","_args3","arguments","_context3","length","undefined","accessToken","localStorage","getItem","code","URLSearchParams","search","getOrRenewAccessToken","lastSavedTime","Date","now","_callee4","type","tokenInfo","_context4","setItem","access_token","refresh_token","CitySearch","suggestions","handleInputChanged","value","target","getSuggestions","then","handleItemClicked","updateEvents","onChange","placeholder","defaultCity","item","NumberOfEvents","numberOfEvents","updateNumberOfEvents","prevProps","App","response","console","log","getNewListOfEvents","src_CitySearch","src_EventList","src_NumberOfEvents","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7920d2b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Event extends Component {\n  state = {\n\n    showDetails: false\n  }\n\n  handleShowDetails = () => {\n    if(this.state.showDetails === false) {\n      this.setState({ showDetails: true });\n    }\n    else {\n      this.setState({ showDetails: false });\n    }\n  }\n\n  render() {\n    const showDetails = this.state.showDetails;\n\n    return(\n      <div className=\"event\">\n        <div className=\"event__Overview\">\n          <p className=\"event__Overview--name\">{this.props.event.name}</p>\n          <p className=\"event__Overview--localDate\">{this.props.event.local_date}</p>\n          <button className=\"details-btn\" onClick={() => this.handleShowDetails()}>show details</button>\n        </div>\n        {showDetails &&\n          <div className=\"event__Details\">\n            <p className=\"event__Details--description\">{this.props.event.description}</p>\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Event;\n","import React, { Component } from 'react';\nimport Event from './Event';\n\nclass EventList extends Component {\n  \n  render() {\n    return (\n      <ul className=\"EventList\">\n        {this.props.events.map(event =>\n          <li key={event.id}>\n            <Event event={event} />\n          </li>\n        )}\n      </ul>\n    );\n  }\n}\n\nexport default EventList;\n","const mockEvents = {\n  city: {\n    id: 1007700,\n    city: \"MÃ¼nchen\",\n    lat: 48.14,\n    lon: 11.58,\n    state: \"\",\n    country: \"de\",\n    zip: \"meetup3\",\n    member_count: 1257\n  },\n  events:[\n    {\n      created: 1563825339000,\n      duration: 9000000,\n      id: \"263370107\",\n      name: \"Microservices mit dem MicroProfile 3.x\",\n      rsvp_limit: 80,\n      date_in_series_pattern: false,\n      status: \"upcoming\",\n      time: 1566925200000,\n      local_date: \"2019-08-27\",\n      local_time: \"19:00\",\n      updated: 1563825339000,\n      utc_offset: 7200000,\n      waitlist_count: 79,\n      yes_rsvp_count: 80,\n      venue: {\n      id: 26266792,\n      name: \"adesso AG\",\n      lat: 53.54524230957031,\n      lon: 9.950983047485352,\n      repinned: false,\n      address_1: \"GroÃe ElbstraÃe 36\",\n      city: \"Hamburg\",\n      country: \"de\",\n      localized_country_name: \"Deutschland\"\n      },\n      group: {\n      created: 1387402147000,\n      name: \"Java User Group Hamburg\",\n      id: 11500362,\n      join_mode: \"open\",\n      lat: 53.54999923706055,\n      lon: 10,\n      urlname: \"jug-hamburg\",\n      who: \"Mitglieder\",\n      localized_location: \"Hamburg, Deutschland\",\n      state: \"\",\n      country: \"de\",\n      region: \"de_DE\",\n      timezone: \"Europe/Berlin\"\n      },\n      link: \"https://www.meetup.com/de-DE/jug-hamburg/events/263370107/\",\n      description: \"<p>Wer Microservices in Java entwickeln mÃ¶chte, muss nicht zwangslÃ¤ufig zu Spring Boot greifen. Es lohnt ein Blick auf alternative Frameworks, die in zunehmender Anzahl verfÃ¼gbar sind und bezÃ¼glich ihrer FunktionalitÃ¤t stark aufholen. So schreitet auch die Entwicklung des MicroProfiles weiter voran. In beeindruckender Geschwindigkeit wurden zahlreiche APIs entwickelt, die (nicht nur) fÃ¼r die Entwicklung von Microservices sehr hilfreich sind.<br/>Hierzu zÃ¤hlen die UnterstÃ¼tzung von Metriken, Health Checks, Fault Tolerance und JSON Web Tokens. FÃ¼r den Einsatz im Projekt kann aus unterschiedlichen Implementierungen wie TomEE, Thorntail oder OpenLiberty gewÃ¤hlt werden. In dieser Live-Coding-Session wird der praktische Einsatz von MicroProfile anhand eines Praxisbeispiels demonstriert.<br/> <br/> <br/>Referent:<br/>Thilo Frotscher arbeitet als freiberuflicher Softwarearchitekt und Trainer. Als Experte fÃ¼r Enterprise Java und Systemintegration unterstÃ¼tzt er seine Kunden Ã¼berwiegend durch Entwicklung, Reviews oder die DurchfÃ¼hrung von Schulungen. Thilo ist (Co-)Autor mehrerer BÃ¼cher in den Bereichen Java EE, (Web) Services und Systemintegration, hat zahlreiche Fachartikel verfasst und spricht regelmÃ¤Ãig auf Fachkonferenzen und Schulungsveranstaltungen oder bei Java User Groups.</p> \",\n      visibility: \"public\",\n      member_pay_fee: false\n    }\n  ]\n};\n\nexport { mockEvents };\n","import axios from 'axios';\nimport { mockEvents } from './mock-events';\n\nasync function getSuggestions(query) {\n  if (window.location.href.startsWith('http://localhost')) {\n    return [\n      {\n        city: 'Munich',\n        country: 'de',\n        localized_country_name: 'Germany',\n        name_string: 'Munich, Germany',\n        zip: 'meetup3',\n        lat: 48.14,\n        lon: 11.58\n      },\n      {\n        city: 'Munich',\n        country: 'us',\n        localized_country_name: 'USA',\n        state: 'ND',\n        name_string: 'Munich, North Dakota, USA',\n        zip: '58352',\n        lat: 48.66,\n        lon: -98.85\n      }\n    ];\n  }\n\n  const token = await getAccessToken();\n\n  if (token) {\n    const url = 'https://api.meetup.com/find/locations?&sign=true&photo-host=public&query='\n      + query\n      + '&access_token=' + token;\n    const result = await axios.get(url);\n    return result.data;\n  }\n\n  return [];\n};\n\nasync function getEvents(lat, lon) {\n  if (window.location.href.startsWith('http://localhost')) {\n    return mockEvents.events;\n  }\n\n  const token = await getAccessToken();\n\n  if (token) {\n    let url = 'https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public'\n      + '&access_token=' + token;\n    // lat, lon is optional; if you have a lat and lon, you can add them\n    if (lat && lon) {\n      url += '&lat=' + lat + '&lon=' + lon;\n    }\n    const result = await axios.get(url);\n    return result.data;\n  }\n\n};\n\nasync function getNewListOfEvents(lat, lon, page = 1) {\n  if (window.location.href.startsWith('http://localhost')) {\n    return mockEvents.events;\n  }\n\n  const token = await getAccessToken();\n\n  if (token) {\n    let url = 'https://api.meetup.com/find/upcoming_events?&sign=true&photo-host=public'\n      + '&access_token=' + token;\n\n    if (lat && lon && page) {\n      url += '&lat=' + lat + '&lon=' + lon + '&page=' + page;\n    }\n    const result = await axios.get(url);\n    return result.data;\n  }\n\n};\n\nfunction getAccessToken() {\n  const accessToken = localStorage.getItem('access_token');\n\n  if (!accessToken) {\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = searchParams.get('code');\n\n    if (!code) {\n      window.location.href = 'https://secure.meetup.com/oauth2/authorize?client_id=p7ek3hd2gcir2hpcvsih91or6d&response_type=code&redirect_uri=https://guennithegun.github.io/meetup/';\n      return null;\n    }\n\n    return getOrRenewAccessToken('get', code);\n  }\n\n  const lastSavedTime = localStorage.getItem('last_saved_time');\n\n  if (accessToken && (Date.now() - lastSavedTime < 3600000)) {\n    return accessToken\n  }\n\n  const refreshToken = localStorage.getItem('refresh_token');\n\n  return getOrRenewAccessToken('renew', refreshToken);\n};\n\nasync function getOrRenewAccessToken(type, key) {\n  let url;\n  if (type === 'get') {\n    // Lambda endpoint to get token by code\n    url = 'https://977jsu04r2.execute-api.eu-central-1.amazonaws.com/dev/api/token/'\n      + key;\n  } else if (type === 'renew') {\n    // Lambda endpoint to get token by refresh_token\n    url = 'https://977jsu04r2.execute-api.eu-central-1.amazonaws.com/dev/api/refreshtoken/'\n      + key;\n  }\n\n  // Use Axios to make a GET request to the endpoint\n  const tokenInfo = await axios.get(url);\n\n  // Save tokens to localStorage together with a timestamp\n  localStorage.setItem('access_token', tokenInfo.data.access_token);\n  localStorage.setItem('refresh_token', tokenInfo.data.refresh_token);\n  localStorage.setItem('last_saved_time', Date.now());\n\n  // Return the access_token\n  return tokenInfo.data.access_token;\n};\n\nexport { getSuggestions, getEvents, getAccessToken, getNewListOfEvents };\n","import React, { Component } from 'react';\nimport { getSuggestions } from './api';\n\nclass CitySearch extends Component {\n  state = {\n    query: '',\n    suggestions: []\n  }\n\n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    this.setState({ query: value });\n    getSuggestions(value).then(suggestions => this.setState({ suggestions }));\n  }\n\n  handleItemClicked = (value, lat, lon) => {\n    this.setState({ query: value, suggestions: [] });\n    this.props.updateEvents(lat, lon);\n  }\n\n  render() {\n    return (\n      <div className=\"CitySearch\">\n        <input\n          type=\"text\"\n          className=\"city\"\n          value={this.state.query}\n          onChange={this.handleInputChanged}\n          placeholder={this.props.defaultCity}\n        />\n\n        <ul className=\"suggestions\">\n          {this.state.suggestions.map(item =>\n            <li key={item.name_string} onClick={() => this.handleItemClicked(item.name_string, item.lat, item.lon)}>\n              {item.name_string}\n            </li>\n          )}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default CitySearch;\n","import React, { Component } from 'react';\n\nclass NumberOfEvents extends Component {\n\n  componentDidUpdate(prevProps) {\n    if (this.props.numberOfEvents !== prevProps.numberOfEvents) {\n      this.setState({ numberOfEvents: this.props.numberOfEvents });\n    }\n  }\n\n  state = {\n    numberOfEvents: 0\n  }\n\n  handleInputChanged = (event) => {\n    //if(event.target.value >= 1) {\n      const value = event.target.value;\n      //this.setState({ numberOfEvents: value });\n      this.props.updateNumberOfEvents(this.props.lat, this.props.lon, value);\n    //}\n  }\n\n  render() {\n    return(\n      <div className=\"numberOfEvents\">\n        <label>Number of Events: </label>\n        <input\n          type=\"text\"\n          id=\"numberOfEvents__input\"\n          value={this.state.numberOfEvents}\n          onChange={this.handleInputChanged}\n        />\n      </div>\n    );\n  }\n}\n\nexport default NumberOfEvents;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\nimport { getEvents } from './api';\nimport { getNewListOfEvents } from './api'\n\nclass App extends Component {\n\n  componentDidMount() {\n    getEvents().then(response => this.setState({ events: response.events, defaultCity: response.city.city, lat: response.city.lat, lon: response.city.lon }));\n  }\n\n  state = {\n    events: [],\n    defaultCity: '',\n    lat: '',\n    lon: ''\n  }\n\n  updateEvents = (lat, lon) => {\n    getEvents(lat, lon).then(response => this.setState({ events: response.events, numberOfEvents: response.events.length, lat: response.city.lat, lon: response.city.lon }));\n  }\n\n  updateNumberOfEvents = (lat, lon, page) => {\n    console.log('lat: ' + lat);\n    console.log('lon: ' + lon);\n    console.log('page: ' + page);\n    getNewListOfEvents(lat, lon, page).then(response => this.setState({ events: response.events, numberOfEvents: response.events.length }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySearch updateEvents={this.updateEvents} defaultCity={this.state.defaultCity} />\n        <EventList events={this.state.events} />\n        <NumberOfEvents updateNumberOfEvents={this.updateNumberOfEvents} numberOfEvents={this.state.events.length} lat={this.state.lat} lon={this.state.lon} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}